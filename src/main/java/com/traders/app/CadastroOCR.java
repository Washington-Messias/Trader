/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.traders.app;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.traders.utilidades.CapturandoHora;
import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.function.Function;
import org.bson.Document;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.Timer;

/**
 *
 * @author Windows 7
 */
public class CadastroOCR extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public CadastroOCR() {
        initComponents();
        
        
    }
    
    
            MongoClient mongoCliente = new MongoClient();

            MongoDatabase database = mongoCliente.getDatabase("dbTraders");

            MongoCollection<Document> collection = database.getCollection("ocorrencias");

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fundo30 = new javax.swing.JCheckBox();
        topo30 = new javax.swing.JCheckBox();
        fundoDiario = new javax.swing.JCheckBox();
        topoDiario = new javax.swing.JCheckBox();
        sim_ponto = new javax.swing.JCheckBox();
        nao_ponto = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cadastroOCR = new javax.swing.JButton();
        statusOCR = new javax.swing.JLabel();
        fundo30_diario = new javax.swing.JCheckBox();
        topo30_diario = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        sim_ranger = new javax.swing.JCheckBox();
        nao_ranger = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        sim_acertou = new javax.swing.JCheckBox();
        nao_acertou = new javax.swing.JCheckBox();
        date = new javax.swing.JLabel();
        labelHora = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastro de Ocorrencias");
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        fundo30.setText("fundo30");
        fundo30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fundo30ActionPerformed(evt);
            }
        });

        topo30.setText("topo30");
        topo30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topo30ActionPerformed(evt);
            }
        });

        fundoDiario.setText("fundo diario");
        fundoDiario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fundoDiarioActionPerformed(evt);
            }
        });

        topoDiario.setText("topo diario");
        topoDiario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topoDiarioActionPerformed(evt);
            }
        });

        sim_ponto.setText("Sim");
        sim_ponto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sim_pontoActionPerformed(evt);
            }
        });

        nao_ponto.setText("Não");
        nao_ponto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nao_pontoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Ponto");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Ocorrencia");

        cadastroOCR.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cadastroOCR.setText("Cadastro de Ocorrencia");
        cadastroOCR.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null));
        cadastroOCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastroOCRActionPerformed(evt);
            }
        });

        statusOCR.setText("status da ocorrencia");

        fundo30_diario.setText("fundo30 - diario");
        fundo30_diario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fundo30_diarioActionPerformed(evt);
            }
        });

        topo30_diario.setText("topo30 - diario");
        topo30_diario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topo30_diarioActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Range");

        sim_ranger.setText("Sim");
        sim_ranger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sim_rangerActionPerformed(evt);
            }
        });

        nao_ranger.setText("Não");
        nao_ranger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nao_rangerActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Acertou?");

        sim_acertou.setText("Sim");
        sim_acertou.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sim_acertouActionPerformed(evt);
            }
        });

        nao_acertou.setText("Não");
        nao_acertou.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nao_acertouActionPerformed(evt);
            }
        });

        date.setText("Data");

        labelHora.setText("Hora");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sim_ponto)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(53, 53, 53)
                                        .addComponent(nao_ponto))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(153, 153, 153)
                                        .addComponent(jLabel5)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nao_ranger))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(132, 132, 132)
                                .addComponent(date))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sim_ranger)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(topo30)
                                            .addComponent(fundo30)
                                            .addComponent(fundoDiario)
                                            .addComponent(topoDiario)
                                            .addComponent(fundo30_diario)
                                            .addComponent(topo30_diario))
                                        .addGap(164, 164, 164)))))
                        .addGap(48, 48, 48)
                        .addComponent(labelHora)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sim_acertou)
                        .addGap(51, 51, 51)
                        .addComponent(nao_acertou))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(44, 44, 44)))
                .addGap(75, 75, 75))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(cadastroOCR, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(statusOCR)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(date)
                            .addComponent(labelHora))
                        .addGap(205, 205, 205)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sim_acertou)
                            .addComponent(nao_acertou)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nao_ranger)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fundo30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(topo30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fundoDiario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(topoDiario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fundo30_diario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(topo30_diario)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addGap(0, 0, 0)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nao_ponto)
                                    .addComponent(sim_ponto)
                                    .addComponent(sim_ranger))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(cadastroOCR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusOCR)
                .addGap(24, 24, 24))
        );

        setSize(new java.awt.Dimension(728, 456));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /*
    *retornando nome de cada variavel do checkbox para gravar no db as ocorrencias!!!
     */
    Function<Boolean, String> decisao = p -> p == true ? "sim" : "nao";
    Function<Boolean, String> rang = r -> r == true ? "4pts" : "6pts";

/*
    private String fundoDeTrinta() {

        return "fundo de trinta";

    }

    private String topoDeTrinta() {

        return "topo de trinta";

    }

    private String topoDiario() {

        return "topo diario";

    }

    private String fundoDiario() {

        return "fundo diario";

    }

    private String fundoTrintaDiario() {

        return "fundo de trinta diario";

    }

    private String topoTrintaDiario() {

        return "topo de trinta diario";

    }
*/
    private Boolean acertou() {
        if (sim_acertou.isSelected()) {
            return true;
        } else {
            return false;
        }
    }
    
/*
    private Boolean rangers() {
        if (sim_ranger.isSelected()) {
            return true;
        } else {
            return false;
        }
    }
*/
    private Boolean ponto() {
        if (sim_ponto.isSelected()) {
            return true;
        } else {
            return false;
        }
    }
private String valor(){
    if(sim_ranger.isSelected() == true && nao_ranger.isSelected() == false){
        String quatro = "4pts";
        return quatro;
    }else if(sim_ranger.isSelected() == false && nao_ranger.isSelected() == true){
        String seis = "6pts";
        return seis;
    }else{String zero = "0";
        return zero;
    }
}

    /*
    private int horas() {
        if (nove.isSelected()) {
            return 9;
        } else if (dez.isSelected()) {
            return 10;
        } else if (onze.isSelected()) {
            return 11;
        } else if (doze.isSelected()) {
            return 12;
        } else if (treze.isSelected()) {
            return 13;
        } else if (quatorze.isSelected()) {
            return 14;
        } else if (quinze.isSelected()) {
            return 15;
        } else if (dezeseis.isSelected()) {
            return 16;
        } else if (dezesete.isSelected()) {
            return 17;
        } else {
            return 0;
        }
    }
     */
    private Boolean verificacao() {
        if (fundo30.isSelected() == false && topo30.isSelected() == false && fundoDiario.isSelected() == false && topoDiario.isSelected() == false && fundo30_diario.isSelected() == false && topo30_diario.isSelected() == false) {

            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
            statusOCR.setForeground(Color.RED);
            statusOCR.setText("Certifique-se que todos os Campos estão marcados corretamente!!!");

            return false;
        } else if (sim_ponto.isSelected() == false && nao_ponto.isSelected() == false) {

            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
            statusOCR.setForeground(Color.RED);
            statusOCR.setText("Certifique-se que todos os Campos estão marcados corretamente!!!");
            return false;
        
        } else if (sim_acertou.isSelected() == false && nao_acertou.isSelected() == false) {

            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
            statusOCR.setForeground(Color.RED);
            statusOCR.setText("Certifique-se que todos os Campos estão marcados corretamente!!!");
        }/* else if (nove.isSelected() == false && dez.isSelected() == false && onze.isSelected() == false && doze.isSelected() == false && treze.isSelected() == false && quatorze.isSelected() == false && quinze.isSelected() == false && dezeseis.isSelected() == false && dezesete.isSelected() == false) {

            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
            statusOCR.setForeground(Color.RED);
            statusOCR.setText("Certifique-se que todos os Campos estão marcados corretamente!!!");

        }*/ else {
            return true;
        }
        return null;
    }

    private void fundo30_diarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fundo30_diarioActionPerformed
        // TODO add your handling code here:
        if (fundo30_diario.isSelected()) {
            topo30.setSelected(false);
            fundo30.setSelected(false);
            fundoDiario.setSelected(false);
            topoDiario.setSelected(false);
            topo30_diario.setSelected(false);
        }
    }//GEN-LAST:event_fundo30_diarioActionPerformed

    private void fundo30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fundo30ActionPerformed
        // TODO add your handling code here:
        if (fundo30.isSelected()) {
            topo30.setSelected(false);
            fundo30_diario.setSelected(false);
            fundoDiario.setSelected(false);
            topoDiario.setSelected(false);
            topo30_diario.setSelected(false);
        }
    }//GEN-LAST:event_fundo30ActionPerformed

    private void topo30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topo30ActionPerformed
        // TODO add your handling code here:
        if (topo30.isSelected()) {
            fundo30.setSelected(false);
            fundo30_diario.setSelected(false);
            fundoDiario.setSelected(false);
            topoDiario.setSelected(false);
            topo30_diario.setSelected(false);
        }
    }//GEN-LAST:event_topo30ActionPerformed

    private void fundoDiarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fundoDiarioActionPerformed
        // TODO add your handling code here:
        if (fundoDiario.isSelected()) {
            fundo30.setSelected(false);
            topo30.setSelected(false);
            fundo30_diario.setSelected(false);
            topoDiario.setSelected(false);
            topo30_diario.setSelected(false);
        }
    }//GEN-LAST:event_fundoDiarioActionPerformed

    private void topoDiarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topoDiarioActionPerformed
        // TODO add your handling code here:
        if (topoDiario.isSelected()) {
            topo30.setSelected(false);
            fundo30_diario.setSelected(false);
            fundoDiario.setSelected(false);
            fundo30.setSelected(false);
            topo30_diario.setSelected(false);
        }
    }//GEN-LAST:event_topoDiarioActionPerformed

    private void topo30_diarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topo30_diarioActionPerformed
        // TODO add your handling code here:
        if (topo30_diario.isSelected()) {
            topo30.setSelected(false);
            fundo30_diario.setSelected(false);
            fundoDiario.setSelected(false);
            topoDiario.setSelected(false);
            fundo30.setSelected(false);
        }
    }//GEN-LAST:event_topo30_diarioActionPerformed

    private void sim_pontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sim_pontoActionPerformed
        // TODO add your handling code here:
        if (sim_ponto.isSelected()) {
            nao_ponto.setSelected(false);
        }
    }//GEN-LAST:event_sim_pontoActionPerformed

    private void nao_pontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nao_pontoActionPerformed
        // TODO add your handling code here:
        if (nao_ponto.isSelected()) {
            sim_ponto.setSelected(false);
        }
    }//GEN-LAST:event_nao_pontoActionPerformed

    private void sim_rangerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sim_rangerActionPerformed
        // TODO add your handling code here:
        if (sim_ranger.isSelected()) {
            nao_ranger.setSelected(false);
        }
    }//GEN-LAST:event_sim_rangerActionPerformed

    private void nao_rangerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nao_rangerActionPerformed
        // TODO add your handling code here:
        if (nao_ranger.isSelected()) {
            sim_ranger.setSelected(false);
        }
    }//GEN-LAST:event_nao_rangerActionPerformed

    private void sim_acertouActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sim_acertouActionPerformed
        // TODO add your handling code here:
        if (sim_acertou.isSelected()) {
            nao_acertou.setSelected(false);
        }
    }//GEN-LAST:event_sim_acertouActionPerformed

    private void nao_acertouActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nao_acertouActionPerformed
        // TODO add your handling code here:
        if (nao_acertou.isSelected()) {
            sim_acertou.setSelected(false);
        }
    }//GEN-LAST:event_nao_acertouActionPerformed

    private void cadastroOCRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastroOCRActionPerformed
        // TODO add your handling code here:

        verificacao();
        if (verificacao() == true) {
            System.out.println("chegou aqui");
            ArrayList<Object> lista = new ArrayList<>();
/*
            MongoClient mongoCliente = new MongoClient();

            MongoDatabase database = mongoCliente.getDatabase("dbTraders");

            MongoCollection<Document> collection = database.getCollection("ocorrencias");
*/
            if (fundo30.isSelected() || topo30.isSelected() || fundoDiario.isSelected() || topoDiario.isSelected() || fundo30_diario.isSelected() || topo30_diario.isSelected()) {

                String hr = new CapturandoHora().hora(labelHora.getText());
                int hrs = Integer.valueOf(hr);
                
                if(hrs < 9 || hrs > 17){
                    statusOCR.setText("Horario não permitido para o cadastro da ocorrencia!!!");
                }else{
                  Document doc = new Document("nome", nomes())
                        .append("acertou", decisao.apply(acertou()))
                        .append("ranger", valor())
                        .append("ponto", decisao.apply(ponto()))
                        .append("hora", hrs)
                        .append("data", date.getText());

                collection.insertOne(doc);

                MongoCursor<Document> cursor = collection.find().iterator();

                try {
                    while (cursor.hasNext()) {
                        boolean verificando = cursor.next().equals(doc);
                        System.out.println(verificando);
                        if (verificando == true) {
                            System.out.println(doc);
                            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
                            statusOCR.setForeground(Color.GREEN);
                            statusOCR.setText("Cadastro efetuado com sucesso");
                        }
                    }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e);
                } finally {
                    cursor.close();
                }
   
                }
                
            }
/*
            if (topo30.isSelected()) {
                String hr = new CapturandoHora().hora(labelHora.getText());
                int hrs = Integer.valueOf(hr);
                  if(hrs < 9 || hrs > 17){
                    statusOCR.setText("Horario não permitido para o cadastro da ocorrencia!!!");
                }else{
                  Document doc = new Document("nome", fundoDeTrinta())
                        .append("acertou", decisao.apply(acertou()))
                        .append("ranger", valor())
                        .append("ponto", decisao.apply(ponto()))
                        .append("hora", hrs)
                        .append("data", date.getText());

                collection.insertOne(doc);

                MongoCursor<Document> cursor = collection.find().iterator();

                try {
                    while (cursor.hasNext()) {
                        boolean verificando = cursor.next().equals(doc);
                        System.out.println(verificando);
                        if (verificando == true) {
                            System.out.println(doc);
                            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
                            statusOCR.setForeground(Color.GREEN);
                            statusOCR.setText("Cadastro efetuado com sucesso");
                        }
                    }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e);
                } finally {
                    cursor.close();
                }
   
                }
            }

            if (fundoDiario.isSelected()) {
                String hr = new CapturandoHora().hora(labelHora.getText());
                int hrs = Integer.valueOf(hr);
                 if(hrs < 9 || hrs > 17){
                    statusOCR.setText("Horario não permitido para o cadastro da ocorrencia!!!");
                }else{
                  Document doc = new Document("nome", fundoDeTrinta())
                        .append("acertou", decisao.apply(acertou()))
                        .append("ranger", valor())
                        .append("ponto", decisao.apply(ponto()))
                        .append("hora", hrs)
                        .append("data", date.getText());

                collection.insertOne(doc);

                MongoCursor<Document> cursor = collection.find().iterator();

                try {
                    while (cursor.hasNext()) {
                        boolean verificando = cursor.next().equals(doc);
                        System.out.println(verificando);
                        if (verificando == true) {
                            System.out.println(doc);
                            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
                            statusOCR.setForeground(Color.GREEN);
                            statusOCR.setText("Cadastro efetuado com sucesso");
                        }
                    }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e);
                } finally {
                    cursor.close();
                }
   
                }

            }

            if (topo30_diario.isSelected()) {
                   String hr = new CapturandoHora().hora(labelHora.getText());
                int hrs = Integer.valueOf(hr);
                if(hrs < 9 || hrs > 17){
                    statusOCR.setText("Horario não permitido para o cadastro da ocorrencia!!!");
                }else{
                  Document doc = new Document("nome", fundoDeTrinta())
                        .append("acertou", decisao.apply(acertou()))
                        .append("ranger", valor())
                        .append("ponto", decisao.apply(ponto()))
                        .append("hora", hrs)
                        .append("data", date.getText());

                collection.insertOne(doc);

                MongoCursor<Document> cursor = collection.find().iterator();

                try {
                    while (cursor.hasNext()) {
                        boolean verificando = cursor.next().equals(doc);
                        System.out.println(verificando);
                        if (verificando == true) {
                            System.out.println(doc);
                            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
                            statusOCR.setForeground(Color.GREEN);
                            statusOCR.setText("Cadastro efetuado com sucesso");
                        }
                    }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e);
                } finally {
                    cursor.close();
                }
   
                }
            }

            if (fundo30_diario.isSelected()) {
                   String hr = new CapturandoHora().hora(labelHora.getText());
                int hrs = Integer.valueOf(hr);
                 if(hrs < 9 || hrs > 17){
                    statusOCR.setText("Horario não permitido para o cadastro da ocorrencia!!!");
                }else{
                  Document doc = new Document("nome", fundoDeTrinta())
                        .append("acertou", decisao.apply(acertou()))
                        .append("ranger", valor())
                        .append("ponto", decisao.apply(ponto()))
                        .append("hora", hrs)
                        .append("data", date.getText());

                collection.insertOne(doc);

                MongoCursor<Document> cursor = collection.find().iterator();

                try {
                    while (cursor.hasNext()) {
                        boolean verificando = cursor.next().equals(doc);
                        System.out.println(verificando);
                        if (verificando == true) {
                            System.out.println(doc);
                            statusOCR.setFont(new Font("Sans-serif", Font.BOLD, 14));
                            statusOCR.setForeground(Color.GREEN);
                            statusOCR.setText("Cadastro efetuado com sucesso");
                        }
                    }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e);
                } finally {
                    cursor.close();
                }
   
                }

            }
        }

*/
    }//GEN-LAST:event_cadastroOCRActionPerformed
    }
    private String nomes(){
        String nome;
        if(fundo30.isSelected()){
          nome =  fundo30.getText();
          return nome;
        }else if(topo30.isSelected()){
            nome = topo30.getText();
            return nome;
        }else if(fundoDiario.isSelected()){
            nome = fundoDiario.getText();
            return nome;
        }else if(topoDiario.isSelected()){
            nome = topoDiario.getText();
            return nome;
        }else if(topo30_diario.isSelected()){
            nome = topo30_diario.getText();
            return nome;
        }else if(fundo30_diario.isSelected()){
            nome = fundo30_diario.getText();
            return nome;
        }else{
            statusOCR.setFont(new Font("sans-serif", Font.BOLD, 14));
            statusOCR.setForeground(Color.red);
            statusOCR.setText("Checkbox de nomes não estão marcados corretamente!!!");
            return null;
        }
    }
    private void atualizarHoras() {
        LocalDateTime agora = LocalDateTime.now();
        DateTimeFormatter formatar = DateTimeFormatter.ofPattern("HH:mm:ss");
        String hora = formatar.format(agora);
        labelHora.setText(hora);
    }
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        Date data = new Date();
        DateFormat formatter = DateFormat.getDateInstance(DateFormat.SHORT);
        date.setText(formatter.format(data));

        Timer timer = new Timer(1000, event -> {
            atualizarHoras();
        });

        timer.start();

    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroOCR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastroOCR().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cadastroOCR;
    private javax.swing.JLabel date;
    private javax.swing.JCheckBox fundo30;
    private javax.swing.JCheckBox fundo30_diario;
    private javax.swing.JCheckBox fundoDiario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel labelHora;
    private javax.swing.JCheckBox nao_acertou;
    private javax.swing.JCheckBox nao_ponto;
    private javax.swing.JCheckBox nao_ranger;
    private javax.swing.JCheckBox sim_acertou;
    private javax.swing.JCheckBox sim_ponto;
    private javax.swing.JCheckBox sim_ranger;
    private javax.swing.JLabel statusOCR;
    private javax.swing.JCheckBox topo30;
    private javax.swing.JCheckBox topo30_diario;
    private javax.swing.JCheckBox topoDiario;
    // End of variables declaration//GEN-END:variables
}
