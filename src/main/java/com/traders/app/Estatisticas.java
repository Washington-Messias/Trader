/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.traders.app;

import com.traders.controllers.ConsultarDB;
import com.traders.utilidades.FiltroResultado;
import com.traders.utilidades.ManipulandoHora;
import com.traders.models.Ocorrencias;
import com.traders.models.DadosOcorrencia;
import com.traders.utilidades.ConfigurandoNomeParaDB;


import java.util.LinkedHashSet;
import java.util.Set;
import javax.swing.table.DefaultTableModel;
import com.traders.models.ModeloResumo;

import com.traders.utilidades.Hora;
import com.traders.utilidades.ListaDeNomes;

import com.traders.utilidades.Relevancia;
import com.traders.utilidades.RetornandoNome;
import java.util.HashSet;
import java.util.List;
import com.traders.models.ListaDeComparacao;
import com.traders.models.Observation;
import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author Windows 7
 */
public class Estatisticas extends javax.swing.JFrame {

    /**
     * Creates new form Estatisticas
     */
    public Estatisticas() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nome = new javax.swing.JComboBox<>();
        gerar = new javax.swing.JButton();
        semana = new javax.swing.JCheckBox();
        mes = new javax.swing.JCheckBox();
        tres_meses = new javax.swing.JCheckBox();
        seis_meses = new javax.swing.JCheckBox();
        um_ano = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultados = new javax.swing.JTextArea();
        horario = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("estatisticas"); // NOI18N
        setPreferredSize(new java.awt.Dimension(822, 988));

        nome.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "fundo30", "topo30", "fundo30 - diario", "topo30 - diario", "topo diario", "fundo diario" }));

        gerar.setText("Gerar");
        gerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerarActionPerformed(evt);
            }
        });

        semana.setText("últimos 7 dias");
        semana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semanaActionPerformed(evt);
            }
        });

        mes.setText("Mês");
        mes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesActionPerformed(evt);
            }
        });

        tres_meses.setText("3 mêses");
        tres_meses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tres_mesesActionPerformed(evt);
            }
        });

        seis_meses.setText("6 mêses");
        seis_meses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seis_mesesActionPerformed(evt);
            }
        });

        um_ano.setText("1 ano");
        um_ano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                um_anoActionPerformed(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabela);

        resultados.setColumns(20);
        resultados.setRows(5);
        jScrollPane2.setViewportView(resultados);

        horario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "9 H", "10 H", "11 H", "12 H", "13 H", "14 H", "15 H", "16 H" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(77, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gerar, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(horario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(245, 245, 245)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(um_ano)
                                    .addComponent(seis_meses)
                                    .addComponent(tres_meses)
                                    .addComponent(mes)
                                    .addComponent(semana))))
                        .addGap(165, 165, 165))))
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(semana)
                    .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tres_meses)
                    .addComponent(horario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seis_meses)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(um_ano)
                .addGap(67, 67, 67)
                .addComponent(gerar)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(762, 871));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    Set<Ocorrencias> registros = new HashSet<Ocorrencias>();
    // Observation obs = new Observation();
    Set<Ocorrencias> end = new LinkedHashSet<Ocorrencias>();
    Set<Ocorrencias> result = new LinkedHashSet<Ocorrencias>();
    Set<Ocorrencias> fim = new LinkedHashSet<Ocorrencias>();
    Hora hrs = new Hora();
    ManipulandoHora horas = new ManipulandoHora();
    FiltroResultado filtro = new FiltroResultado();
    ModeloResumo resume = new ModeloResumo();
    
    ConsultarDB consulta = new ConsultarDB();

    private void consultaSemana() {

        DadosOcorrencia fundo30 = new DadosOcorrencia();
        DadosOcorrencia topo30 = new DadosOcorrencia();
        DadosOcorrencia fundo30D = new DadosOcorrencia();
        DadosOcorrencia topo30D = new DadosOcorrencia();
        DadosOcorrencia fundoD = new DadosOcorrencia();
        DadosOcorrencia topoD = new DadosOcorrencia();

        DadosOcorrencia dd = new DadosOcorrencia();
        DadosOcorrencia dst = new DadosOcorrencia();
        DadosOcorrencia ddp = new DadosOcorrencia();
        RetornandoNome nm = new RetornandoNome();
        ListaDeNomes listName = new ListaDeNomes();
        ListaDeComparacao guardado = new ListaDeComparacao();
        Relevancia relevante = new Relevancia();
        Set<DadosOcorrencia> ddOcor = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> QTD = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> qtdDestaque = new LinkedHashSet<DadosOcorrencia>();
        Set<Ocorrencias> fd30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fd30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fdd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tpd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> certo = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> errado = new LinkedHashSet<Ocorrencias>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        Object[] columNames = {"id", "nome", "acerto", "ranger", "ponto", "hora", "data"};
        model.setColumnIdentifiers(columNames);
        /*  Acertos acerto = new Acertos();
        Erros erro = new Erros();
        Total total = new Total();
        int acertos = 0;
        int erros = 0;
        double totale = 0;
        String ac;
        String er;
        String tl;
         */
        String resumo;

        String melhor = "MELHOR OCÔRRENCIA \n";
        String destaque = "OCÔRRENCIA QUE SE DESTACA \n";
        String pior = "PIOR OCÔRRENCIA \n";
        resultados.setText("");
        fim.clear();

        result = filtro.semana();
        int h = hrs.resultados(horarios());
        //inserindo dados na tabela
        for (Ocorrencias oc : result) {
            System.out.println(oc.toString());
            if (registros.contains(oc) == true) {

            } else {

                Object[] linhaTable = {oc.get_Id(), oc.getNome(), oc.getAcertou(), oc.getRanger(), oc.getPonto(), oc.getHora(), oc.getData()};

                model.addRow(linhaTable);

            }
            registros.add(oc);
            System.out.println("Conferindo o tamanho do observador" + "\n");
            System.out.println(registros.size());
        }
        /*
            *TODO necessario alterar dentro da condição h == 1 o nome do resultado que deve ser conforme 
            * o nome da ocorrencia.
         */

        //mostrando dados na tela de texto
        switch (h) {
            case 1:
                break;

            case 9:
                fim.addAll(horas.nove(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 10:
                fim.addAll(horas.dez(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 11:
                fim.addAll(horas.onze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 12:
                fim.addAll(horas.doze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 13:
                fim.addAll(horas.treze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 14:
                fim.addAll(horas.quatorze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 15:

                fim.addAll(horas.quinze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);
                
               

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 16:

                fim.addAll(horas.dezesseis(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            default:
                System.out.println("Bug");
                break;
        }

    }

    private void consultaMes() {

        DadosOcorrencia fundo30 = new DadosOcorrencia();
        DadosOcorrencia topo30 = new DadosOcorrencia();
        DadosOcorrencia fundo30D = new DadosOcorrencia();
        DadosOcorrencia topo30D = new DadosOcorrencia();
        DadosOcorrencia fundoD = new DadosOcorrencia();
        DadosOcorrencia topoD = new DadosOcorrencia();

        DadosOcorrencia dd = new DadosOcorrencia();
        DadosOcorrencia dst = new DadosOcorrencia();
        DadosOcorrencia ddp = new DadosOcorrencia();
        RetornandoNome nm = new RetornandoNome();
        ListaDeNomes listName = new ListaDeNomes();
        ListaDeComparacao guardado = new ListaDeComparacao();
        Relevancia relevante = new Relevancia();
        Set<DadosOcorrencia> ddOcor = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> QTD = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> qtdDestaque = new LinkedHashSet<DadosOcorrencia>();
        Set<Ocorrencias> fd30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fd30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fdd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tpd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> certo = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> errado = new LinkedHashSet<Ocorrencias>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        Object[] columNames = {"id", "nome", "acerto", "ranger", "ponto", "hora", "data"};
        model.setColumnIdentifiers(columNames);
        /*  Acertos acerto = new Acertos();
        Erros erro = new Erros();
        Total total = new Total();
        int acertos = 0;
        int erros = 0;
        double totale = 0;
        String ac;
        String er;
        String tl;
         */
        String resumo;

        String melhor = "MELHOR OCÔRRENCIA \n";
        String destaque = "OCÔRRENCIA QUE SE DESTACA \n";
        String pior = "PIOR OCÔRRENCIA \n";
        resultados.setText("");
        fim.clear();

        result = filtro.mes();
        int h = hrs.resultados(horarios());
        //inserindo dados na tabela
        for (Ocorrencias oc : result) {
            System.out.println(oc.toString());
            if (registros.contains(oc) == true) {

            } else {

                Object[] linhaTable = {oc.get_Id(), oc.getNome(), oc.getAcertou(), oc.getRanger(), oc.getPonto(), oc.getHora(), oc.getData()};

                model.addRow(linhaTable);

            }
            registros.add(oc);

            // Observation.adicionar(oc);
            System.out.println("Conferindo o tamanho do observador" + "\n");
            System.out.println(registros.size());
        }
        /*
            *TODO necessario alterar dentro da condição h == 1 o nome do resultado que deve ser conforme 
            * o nome da ocorrencia.
         */

        //mostrando dados na tela de texto
        switch (h) {
            case 1:
                break;

            case 9:
                fim.addAll(horas.nove(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 10:
                fim.addAll(horas.dez(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                if(fdd.size() > 0){
                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));
                }else{
                    System.out.println("zero objetos");
                }
                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 11:
                fim.addAll(horas.onze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());

                    resultados.append("Todas as ocorrencias deste horario");
                    for (Ocorrencias oc : fim) {
                        resultados.append(oc.toString());
                    }
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 12:
                fim.addAll(horas.doze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 13:
                fim.addAll(horas.treze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 14:
                fim.addAll(horas.quatorze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 15:

                fim.addAll(horas.quinze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 16:

                fim.addAll(horas.dezesseis(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            default:
                System.out.println("Bug");
                break;
        }

    }

    private void consultaTresMeses() {

        DadosOcorrencia fundo30 = new DadosOcorrencia();
        DadosOcorrencia topo30 = new DadosOcorrencia();
        DadosOcorrencia fundo30D = new DadosOcorrencia();
        DadosOcorrencia topo30D = new DadosOcorrencia();
        DadosOcorrencia fundoD = new DadosOcorrencia();
        DadosOcorrencia topoD = new DadosOcorrencia();

        DadosOcorrencia dd = new DadosOcorrencia();
        DadosOcorrencia dst = new DadosOcorrencia();
        DadosOcorrencia ddp = new DadosOcorrencia();
        RetornandoNome nm = new RetornandoNome();
        ListaDeNomes listName = new ListaDeNomes();
        ListaDeComparacao guardado = new ListaDeComparacao();
        Relevancia relevante = new Relevancia();
        Set<DadosOcorrencia> ddOcor = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> QTD = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> qtdDestaque = new LinkedHashSet<DadosOcorrencia>();
        Set<Ocorrencias> fd30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fd30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fdd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tpd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> certo = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> errado = new LinkedHashSet<Ocorrencias>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        Object[] columNames = {"id", "nome", "acerto", "ranger", "ponto", "hora", "data"};
        model.setColumnIdentifiers(columNames);
        /*  Acertos acerto = new Acertos();
        Erros erro = new Erros();
        Total total = new Total();
        int acertos = 0;
        int erros = 0;
        double totale = 0;
        String ac;
        String er;
        String tl;
         */
        String resumo;

        String melhor = "MELHOR OCÔRRENCIA \n";
        String destaque = "OCÔRRENCIA QUE SE DESTACA \n";
        String pior = "PIOR OCÔRRENCIA \n";
        resultados.setText("");
        fim.clear();

        result = filtro.tresMeses();
        int h = hrs.resultados(horarios());
        //inserindo dados na tabela
        for (Ocorrencias oc : result) {
            System.out.println(oc.toString());
            if (registros.contains(oc) == true) {

            } else {

                Object[] linhaTable = {oc.get_Id(), oc.getNome(), oc.getAcertou(), oc.getRanger(), oc.getPonto(), oc.getHora(), oc.getData()};

                model.addRow(linhaTable);

            }
            registros.add(oc);
            System.out.println("Conferindo o tamanho do observador" + "\n");
            System.out.println(registros.size());
        }
        /*
            *TODO necessario alterar dentro da condição h == 1 o nome do resultado que deve ser conforme 
            * o nome da ocorrencia.
         */

        //mostrando dados na tela de texto
        switch (h) {
            case 1:
                break;

            case 9:
                fim.addAll(horas.nove(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 10:
                fim.addAll(horas.dez(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 11:
                fim.addAll(horas.onze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 12:
                fim.addAll(horas.doze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 13:
                fim.addAll(horas.treze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 14:
                fim.addAll(horas.quatorze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 15:

                fim.addAll(horas.quinze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 16:

                fim.addAll(horas.dezesseis(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            default:
                System.out.println("Bug");
                break;
        }

    }

    private void consultaSeisMeses() {

        DadosOcorrencia fundo30 = new DadosOcorrencia();
        DadosOcorrencia topo30 = new DadosOcorrencia();
        DadosOcorrencia fundo30D = new DadosOcorrencia();
        DadosOcorrencia topo30D = new DadosOcorrencia();
        DadosOcorrencia fundoD = new DadosOcorrencia();
        DadosOcorrencia topoD = new DadosOcorrencia();

        DadosOcorrencia dd = new DadosOcorrencia();
        DadosOcorrencia dst = new DadosOcorrencia();
        DadosOcorrencia ddp = new DadosOcorrencia();
        RetornandoNome nm = new RetornandoNome();
        ListaDeNomes listName = new ListaDeNomes();
        ListaDeComparacao guardado = new ListaDeComparacao();
        Relevancia relevante = new Relevancia();
        Set<DadosOcorrencia> ddOcor = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> QTD = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> qtdDestaque = new LinkedHashSet<DadosOcorrencia>();
        Set<Ocorrencias> fd30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fd30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fdd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tpd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> certo = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> errado = new LinkedHashSet<Ocorrencias>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        Object[] columNames = {"id", "nome", "acerto", "ranger", "ponto", "hora", "data"};
        model.setColumnIdentifiers(columNames);
        /*  Acertos acerto = new Acertos();
        Erros erro = new Erros();
        Total total = new Total();
        int acertos = 0;
        int erros = 0;
        double totale = 0;
        String ac;
        String er;
        String tl;
         */
        String resumo;

        String melhor = "MELHOR OCÔRRENCIA \n";
        String destaque = "OCÔRRENCIA QUE SE DESTACA \n";
        String pior = "PIOR OCÔRRENCIA \n";
        resultados.setText("");
        fim.clear();

        result = filtro.seisMeses();
        int h = hrs.resultados(horarios());
        //inserindo dados na tabela
        for (Ocorrencias oc : result) {
            System.out.println(oc.toString());
            if (registros.contains(oc) == true) {

            } else {

                Object[] linhaTable = {oc.get_Id(), oc.getNome(), oc.getAcertou(), oc.getRanger(), oc.getPonto(), oc.getHora(), oc.getData()};

                model.addRow(linhaTable);

            }
            registros.add(oc);
            System.out.println("Conferindo o tamanho do observador" + "\n");
            System.out.println(registros.size());
        }
        /*
            *TODO necessario alterar dentro da condição h == 1 o nome do resultado que deve ser conforme 
            * o nome da ocorrencia.
         */

        //mostrando dados na tela de texto
        switch (h) {
            case 1:
                break;

            case 9:
                fim.addAll(horas.nove(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 10:
                fim.addAll(horas.dez(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 11:
                fim.addAll(horas.onze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 12:
                fim.addAll(horas.doze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 13:
                fim.addAll(horas.treze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 14:
                fim.addAll(horas.quatorze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 15:

                fim.addAll(horas.quinze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 16:

                fim.addAll(horas.dezesseis(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            default:
                System.out.println("Bug");
                break;
        }

    }

    private void consultaAno() {

        DadosOcorrencia fundo30 = new DadosOcorrencia();
        DadosOcorrencia topo30 = new DadosOcorrencia();
        DadosOcorrencia fundo30D = new DadosOcorrencia();
        DadosOcorrencia topo30D = new DadosOcorrencia();
        DadosOcorrencia fundoD = new DadosOcorrencia();
        DadosOcorrencia topoD = new DadosOcorrencia();

        DadosOcorrencia dd = new DadosOcorrencia();
        DadosOcorrencia dst = new DadosOcorrencia();
        DadosOcorrencia ddp = new DadosOcorrencia();
        RetornandoNome nm = new RetornandoNome();
        ListaDeNomes listName = new ListaDeNomes();
        ListaDeComparacao guardado = new ListaDeComparacao();
        Relevancia relevante = new Relevancia();
        Set<DadosOcorrencia> ddOcor = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> QTD = new LinkedHashSet<DadosOcorrencia>();
        Set<DadosOcorrencia> qtdDestaque = new LinkedHashSet<DadosOcorrencia>();
        Set<Ocorrencias> fd30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30 = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fd30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tp30D = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> fdd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> tpd = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> certo = new LinkedHashSet<Ocorrencias>();
        Set<Ocorrencias> errado = new LinkedHashSet<Ocorrencias>();
        DefaultTableModel model = (DefaultTableModel) tabela.getModel();
        Object[] columNames = {"id", "nome", "acerto", "ranger", "ponto", "hora", "data"};
        model.setColumnIdentifiers(columNames);
        /*  Acertos acerto = new Acertos();
        Erros erro = new Erros();
        Total total = new Total();
        int acertos = 0;
        int erros = 0;
        double totale = 0;
        String ac;
        String er;
        String tl;
         */
        String resumo;

        String melhor = "MELHOR OCÔRRENCIA \n";
        String destaque = "OCÔRRENCIA QUE SE DESTACA \n";
        String pior = "PIOR OCÔRRENCIA \n";
        resultados.setText("");
        fim.clear();

        result = filtro.ano();
        int h = hrs.resultados(horarios());
        //inserindo dados na tabela
        for (Ocorrencias oc : result) {
            System.out.println(oc.toString());
            if (registros.contains(oc) == true) {

            } else {

                Object[] linhaTable = {oc.get_Id(), oc.getNome(), oc.getAcertou(), oc.getRanger(), oc.getPonto(), oc.getHora(), oc.getData()};

                model.addRow(linhaTable);

            }
            registros.add(oc);
            System.out.println("Conferindo o tamanho do observador" + "\n");
            System.out.println(registros.size());
        }
        /*
            *TODO necessario alterar dentro da condição h == 1 o nome do resultado que deve ser conforme 
            * o nome da ocorrencia.
         */

        //mostrando dados na tela de texto
        switch (h) {
            case 1:
                break;

            case 9:
                fim.addAll(horas.nove(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 10:
                fim.addAll(horas.dez(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 11:
                fim.addAll(horas.onze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 12:
                fim.addAll(horas.doze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 13:
                fim.addAll(horas.treze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 14:
                fim.addAll(horas.quatorze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 15:

                fim.addAll(horas.quinze(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            case 16:

                fim.addAll(horas.dezesseis(result));
                System.out.println("conferindo o 'fim'".toUpperCase());
                for (Ocorrencias oc : fim) {
                    System.out.println(oc.toString());
                }
                fd30.addAll(listName.lista(fim, nm.fundo30()));

                tp30.addAll(listName.lista(fim, nm.topo30()));
                fd30D.addAll(listName.lista(fim, nm.fundo30Diario()));
                tp30D.addAll(listName.lista(fim, nm.topo30Diario()));
                fdd.addAll(listName.lista(fim, nm.fundoDiario()));
                tpd.addAll(listName.lista(fim, nm.topoDiario()));
                //certo.addAll(acer.maxAcertos(fd30, tp30, fd30D, tp30D, fdd, tpd));

                ddOcor.add(resume.resumo(fd30, nm.fundo30(), h));

                ddOcor.add(resume.resumo(tp30, nm.topo30(), h));

                ddOcor.add(resume.resumo(fd30D, nm.fundo30Diario(), h));

                ddOcor.add(resume.resumo(tp30D, nm.topo30Diario(), h));

                ddOcor.add(resume.resumo(fdd, nm.fundoDiario(), h));

                ddOcor.add(resume.resumo(tpd, nm.topoDiario(), h));

                System.out.println("chegou no for de ddOcor".toUpperCase());
                for (DadosOcorrencia oc : ddOcor) {
                    System.out.println(oc.toString());
                }

                QTD = relevante.maiorQTD(ddOcor);

                dd = relevante.melhor(QTD);
                qtdDestaque.addAll(guardado.lista);
                dst = relevante.destaque(qtdDestaque);
                ddp = relevante.pior(ddOcor);
                melhor = "MELHOR OCÔRRENCIA \n";
                destaque = "OCÔRRENCIA QUE SE DESTACA \n";
                pior = "PIOR OCÔRRENCIA \n";

                resultados.append(melhor + dd.toString());
                if (dst == null) {
                    resultados.append(destaque + "----------------------------" + "\n");
                } else {
                    resultados.append(destaque + dst.toString());
                }

                resultados.append(pior + ddp.toString());

                resultados.append("Todas as ocorrencias deste horario \n");
                for (Ocorrencias oc : fim) {
                    resultados.append(oc.toString() + "\n");
                }

                ddOcor.clear();

                fundo30 = resume.resumo(fd30, nm.fundo30(), h);
                topo30 = resume.resumo(tp30, nm.topo30(), h);
                fundo30D = resume.resumo(fd30D, nm.fundo30Diario(), h);
                topo30D = resume.resumo(tp30D, nm.topo30Diario(), h);
                fundoD = resume.resumo(fdd, nm.fundoDiario(), h);
                topoD = resume.resumo(tpd, nm.topo30Diario(), h);

                resultados.append("*--------------------");
                resultados.append(fundo30.toString());
                resultados.append(topo30.toString());
                resultados.append(fundo30D.toString());
                resultados.append(topo30D.toString());
                resultados.append(topoD.toString());

                break;

            default:
                System.out.println("Bug");
                break;
        }

    }
    private void semanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semanaActionPerformed
        // TODO add your handling code here:
        if (semana.isSelected() == true) {
            mes.setSelected(false);
            seis_meses.setSelected(false);
            tres_meses.setSelected(false);
            um_ano.setSelected(false);
        }
    }//GEN-LAST:event_semanaActionPerformed

    private void mesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesActionPerformed
        // TODO add your handling code here:
        if (mes.isSelected() == true) {
            semana.setSelected(false);
            seis_meses.setSelected(false);
            tres_meses.setSelected(false);
            um_ano.setSelected(false);
        }
    }//GEN-LAST:event_mesActionPerformed

    private void tres_mesesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tres_mesesActionPerformed
        // TODO add your handling code here:
        if (tres_meses.isSelected() == true) {
            mes.setSelected(false);
            seis_meses.setSelected(false);
            semana.setSelected(false);
            um_ano.setSelected(false);
        }
    }//GEN-LAST:event_tres_mesesActionPerformed

    private void seis_mesesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seis_mesesActionPerformed
        // TODO add your handling code here:
        if (seis_meses.isSelected() == true) {
            mes.setSelected(false);
            semana.setSelected(false);
            tres_meses.setSelected(false);
            um_ano.setSelected(false);
        }
    }//GEN-LAST:event_seis_mesesActionPerformed

    private void um_anoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_um_anoActionPerformed
        // TODO add your handling code here:
        if (um_ano.isSelected() == true) {
            mes.setSelected(false);
            seis_meses.setSelected(false);
            tres_meses.setSelected(false);
            semana.setSelected(false);
        }
    }//GEN-LAST:event_um_anoActionPerformed

    private void gerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerarActionPerformed

        if (semana.isSelected() == true) {
            consultaSemana();
        } else if (mes.isSelected() == true) {
            consultaMes();
        } else if (tres_meses.isSelected() == true) {
            consultaTresMeses();
        } else if (seis_meses.isSelected() == true) {
            consultaSeisMeses();
        } else if (um_ano.isSelected() == true) {
            consultaAno();
        } else {

            JOptionPane.showMessageDialog(null, "Escolha o filtro temporal");

        }

    }//GEN-LAST:event_gerarActionPerformed

    /**
     * @param args the command line arguments
     */
    private String names() {
        String name = nome.getSelectedItem().toString();
        return name;
    }

    private String horarios() {
        String retorno = horario.getSelectedItem().toString();
        return retorno;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Estatisticas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Estatisticas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Estatisticas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Estatisticas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Estatisticas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton gerar;
    private javax.swing.JComboBox<String> horario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox mes;
    private javax.swing.JComboBox<String> nome;
    private javax.swing.JTextArea resultados;
    private javax.swing.JCheckBox seis_meses;
    private javax.swing.JCheckBox semana;
    private javax.swing.JTable tabela;
    private javax.swing.JCheckBox tres_meses;
    private javax.swing.JCheckBox um_ano;
    // End of variables declaration//GEN-END:variables
}
